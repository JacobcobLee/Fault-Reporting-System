{"ast":null,"code":"import _createForOfIteratorHelper from \"D:\\\\material-dashboard-react-master\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createForOfIteratorHelper\";\nvar _jsxFileName = \"D:\\\\material-dashboard-react-master\\\\src\\\\views\\\\Analytics\\\\Analytics.js\";\nimport React from \"react\"; // core components\n\nimport GridItem from \"components/Grid/GridItem.js\";\nimport GridContainer from \"components/Grid/GridContainer.js\";\nimport CustomInput from \"components/CustomInput/CustomInput.js\";\nimport Button from \"components/CustomButtons/Button.js\";\nimport Card from \"components/Card/Card.js\";\nimport CardHeader from \"components/Card/CardHeader.js\";\nimport CardAvatar from \"components/Card/CardAvatar.js\";\nimport CardBody from \"components/Card/CardBody.js\";\nimport CardFooter from \"components/Card/CardFooter.js\";\nimport { Container, List } from \"semantic-ui-react\";\nimport { Fragment } from 'react';\nimport axios from 'axios';\nimport Table from \"components/Table/Table.js\";\nvar newCases = [];\nvar array = [];\n\nvar download = function download(data) {\n  var blob = new Blob([data], {\n    type: 'text/csv'\n  });\n  var url = window.URL.createObjectURL(blob);\n  var a = document.createElement('a');\n  a.setAttribute('hidden', '');\n  a.setAttribute('href', url);\n  a.setAttribute('download', 'download.csv');\n  document.body.appendChild(a);\n  a.click();\n  document.body.removeChild(a);\n};\n\nfunction generateResolvedCases() {\n  axios.get(\"http://localhost:8080/api/v1/fault?status=Resolved\").then(function (response) {\n    newCases.push(response.data);\n    array.push(Object.values(newCases[0]));\n    console.log(array);\n    var data = array[0].map(function (row) {\n      return {\n        Comments: row.comments,\n        ReportedOn: row.dateTime,\n        Description: row.description,\n        Category: row.problem.category,\n        StaffName: row.staffName,\n        StoreName: row.storeName\n      };\n    });\n    console.log('sadas'); //console.log(data);\n\n    var csvRows = []; //get the headers\n\n    var headers = Object.keys(data[0]);\n    csvRows.push(headers.join(',')); //loop over rows\n\n    var _iterator = _createForOfIteratorHelper(data),\n        _step;\n\n    try {\n      var _loop = function _loop() {\n        var row = _step.value;\n        var values = headers.map(function (header) {\n          return row[header];\n        });\n        csvRows.push(values.join(','));\n      };\n\n      for (_iterator.s(); !(_step = _iterator.n()).done;) {\n        _loop();\n      } //form escaped comma seperated values\n\n    } catch (err) {\n      _iterator.e(err);\n    } finally {\n      _iterator.f();\n    }\n\n    var newdata = csvRows.map(function (e) {\n      return e;\n    }).join('\\n');\n    console.log(newdata);\n    download(newdata);\n  });\n}\n\nvar resolvedCases = [];\nvar temp = [];\n\nfunction getResolvedCases() {\n  axios.get(\"http://localhost:8080/api/v1/fault?status=Resolved\").then(function (response) {\n    try {\n      resolvedCases.push(response.data);\n      temp.push(Object.values(resolvedCases[0]));\n      console.log(array[0]);\n    } catch (error) {\n      console.log(error);\n    }\n  });\n}\n\ngetResolvedCases();\nexport default function Analytics() {\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(GridContainer, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(GridItem, {\n    xs: 12,\n    sm: 12,\n    md: 12,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Card, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(CardHeader, {\n    color: \"primary\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"h4\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 11\n    }\n  }, \"Resolved Cases\"), /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 11\n    }\n  }, \"Resolved cases can be generated as excel sheet and downloaded\")), /*#__PURE__*/React.createElement(CardBody, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Table, {\n    tableHeaderColor: \"primary\",\n    tableHead: [\"Case Reported On\", \"Store Location\", \"Category\", \"Description\", \"Staff Name\", \"Comments\"],\n    tableData: temp[0].map(function (temp) {\n      return [temp.dateTime, temp.storeName, temp.problem.category, temp.description, temp.staffName, temp.comments];\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 11\n    }\n  }))))), /*#__PURE__*/React.createElement(GridContainer, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 125,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(GridItem, {\n    xs: 12,\n    sm: 12,\n    md: 12,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 126,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Button, {\n    onClick: function onClick() {\n      return generateResolvedCases();\n    },\n    fullWidth: true,\n    color: \"info\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 128,\n      columnNumber: 7\n    }\n  }, \"Generate Excel Sheet\"))));\n}","map":{"version":3,"sources":["D:/material-dashboard-react-master/src/views/Analytics/Analytics.js"],"names":["React","GridItem","GridContainer","CustomInput","Button","Card","CardHeader","CardAvatar","CardBody","CardFooter","Container","List","Fragment","axios","Table","newCases","array","download","data","blob","Blob","type","url","window","URL","createObjectURL","a","document","createElement","setAttribute","body","appendChild","click","removeChild","generateResolvedCases","get","then","response","push","Object","values","console","log","map","row","Comments","comments","ReportedOn","dateTime","Description","description","Category","problem","category","StaffName","staffName","StoreName","storeName","csvRows","headers","keys","join","header","newdata","e","resolvedCases","temp","getResolvedCases","error","Analytics"],"mappings":"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","sourcesContent":["import React from \"react\";\n// core components\nimport GridItem from \"components/Grid/GridItem.js\";\nimport GridContainer from \"components/Grid/GridContainer.js\";\nimport CustomInput from \"components/CustomInput/CustomInput.js\";\nimport Button from \"components/CustomButtons/Button.js\";\nimport Card from \"components/Card/Card.js\";\nimport CardHeader from \"components/Card/CardHeader.js\";\nimport CardAvatar from \"components/Card/CardAvatar.js\";\nimport CardBody from \"components/Card/CardBody.js\";\nimport CardFooter from \"components/Card/CardFooter.js\";\nimport { Container, List } from \"semantic-ui-react\";\nimport {Fragment} from 'react';\nimport axios from 'axios';\nimport Table from \"components/Table/Table.js\";\n\n\n\nconst newCases = [];\nconst array = [];\n\nconst download = function (data) {\n  const blob = new Blob([data], { type: 'text/csv' });\n  const url = window.URL.createObjectURL(blob);\n  const a = document.createElement('a');\n  a.setAttribute('hidden', '');\n  a.setAttribute('href', url);\n  a.setAttribute('download', 'download.csv');\n  document.body.appendChild(a);\n  a.click();\n  document.body.removeChild(a);\n};\n\n\nfunction generateResolvedCases() {\n  axios\n    .get(\"http://localhost:8080/api/v1/fault?status=Resolved\")\n    .then((response) => {\n      newCases.push(response.data)\n      array.push(Object.values(newCases[0]))\n      console.log(array);\n\n      const data = array[0].map(row => ({\n        Comments: row.comments,\n        ReportedOn: row.dateTime,\n        Description: row.description,\n        Category: row.problem.category,\n        StaffName: row.staffName,\n        StoreName: row.storeName\n      }));\n      console.log('sadas');\n      //console.log(data);\n\n      const csvRows = [];\n\n      //get the headers\n      const headers = Object.keys(data[0]);\n\n      csvRows.push(headers.join(','));\n\n      //loop over rows\n      for (const row of data) {\n        const values = headers.map(header => {\n\n          return row[header];\n        });\n        csvRows.push(values.join(','));\n      }\n      //form escaped comma seperated values\n      const newdata = csvRows.map(e => e).join('\\n');\n      console.log(newdata);\n      download(newdata);\n    })\n    \n}\n\nconst resolvedCases = [];\nconst temp =[];\nfunction getResolvedCases(){\n  axios\n  .get(\"http://localhost:8080/api/v1/fault?status=Resolved\")\n  .then((response) => {\n    try{\n    resolvedCases.push(response.data)\n    temp.push(Object.values(resolvedCases[0]))\n    console.log(array[0]);\n    }\n    catch(error){\n      console.log(error);\n    }\n})\n}\ngetResolvedCases();\n\n\n\n\n\nexport default function Analytics() {\n  return (\n    <div>\n    <GridContainer>\n    <GridItem xs={12} sm={12} md={12}>\n      <Card>\n        <CardHeader color=\"primary\">\n          <h4>Resolved Cases</h4>\n          <p>\n            Resolved cases can be generated as excel sheet and downloaded\n          </p>\n        </CardHeader>\n        <CardBody>\n          <Table\n            tableHeaderColor=\"primary\"\n            tableHead={[\"Case Reported On\", \"Store Location\", \"Category\", \"Description\", \"Staff Name\", \"Comments\"]}\n            tableData={\n              temp[0].map((temp) => {\n                return [temp.dateTime,temp.storeName,temp.problem.category,temp.description,temp.staffName,temp.comments]\n            })\n            }\n          />\n        </CardBody>\n      </Card>\n    </GridItem>\n  </GridContainer>\n    <GridContainer>\n      <GridItem xs={12} sm={12} md={12}>\n      {/* <p>Generate Excel Sheet</p> */}\n      <Button onClick={() => generateResolvedCases()} fullWidth color=\"info\">Generate Excel Sheet</Button>\n      </GridItem>\n    </GridContainer>\n    </div>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}