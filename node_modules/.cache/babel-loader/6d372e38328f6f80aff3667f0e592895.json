{"ast":null,"code":"var _jsxFileName = \"D:\\\\material-dashboard-react-master\\\\src\\\\views\\\\Analytics\\\\Analytics.js\";\nimport React from \"react\"; // core components\n\nimport GridItem from \"components/Grid/GridItem.js\";\nimport GridContainer from \"components/Grid/GridContainer.js\";\nimport CustomInput from \"components/CustomInput/CustomInput.js\";\nimport Button from \"components/CustomButtons/Button.js\";\nimport Card from \"components/Card/Card.js\";\nimport CardHeader from \"components/Card/CardHeader.js\";\nimport CardAvatar from \"components/Card/CardAvatar.js\";\nimport CardBody from \"components/Card/CardBody.js\";\nimport CardFooter from \"components/Card/CardFooter.js\";\nimport { Container, List } from \"semantic-ui-react\";\nimport { Fragment } from 'react';\nimport axios from 'axios';\nimport Table from \"components/Table/Table.js\";\nimport ReactPaginate from 'react-paginate'; // const newCases = [];\n// const array = [];\n// const download = function (data) {\n//   const blob = new Blob([data], { type: 'text/csv' });\n//   const url = window.URL.createObjectURL(blob);\n//   const a = document.createElement('a');\n//   a.setAttribute('hidden', '');\n//   a.setAttribute('href', url);\n//   a.setAttribute('download', 'download.csv');\n//   document.body.appendChild(a);\n//   a.click();\n//   document.body.removeChild(a);\n// };\n// function generateResolvedCases() {\n//   axios\n//     .get(\"http://localhost:8080/api/v1/fault?status=Resolved\")\n//     .then((response) => {\n//       newCases.push(response.data)\n//       array.push(Object.values(newCases[0]))\n//       console.log(array);\n//       const data = array[0].map(row => ({\n//         ReportedOn: row.dateTime,\n//         StoreName: row.storeName,\n//         Category: row.problem.category,\n//         Description: row.description,\n//         StaffName: row.staffName,\n//         Comments: row.comments\n//       }));\n//       console.log('sadas');\n//       //console.log(data);\n//       const csvRows = [];\n//       //get the headers\n//       const headers = Object.keys(data[0]);\n//       csvRows.push(headers.join(','));\n//       //loop over rows\n//       for (const row of data) {\n//         const values = headers.map(header => {\n//           return row[header];\n//         });\n//         csvRows.push(values.join(','));\n//       }\n//       //form escaped comma seperated values\n//       const newdata = csvRows.map(e => e).join('\\n');\n//       console.log(newdata);\n//       download(newdata);\n//     })\n// }\n\nvar resolvedCases = [];\nvar temp = [];\n\nfunction getResolvedCases() {\n  axios.get(\"http://localhost:8080/api/v1/fault?status=Resolved\").then(function (response) {\n    try {\n      resolvedCases.push(response.data);\n      temp.push(Object.values(resolvedCases[0]));\n      console.log(array[0]);\n    } catch (error) {\n      console.log(error);\n    }\n  });\n}\n\ngetResolvedCases();\nexport default function Analytics() {\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(GridContainer, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(GridItem, {\n    xs: 12,\n    sm: 12,\n    md: 12,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Card, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(CardHeader, {\n    color: \"primary\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"h4\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 11\n    }\n  }, \"Resolved Cases\"), /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 11\n    }\n  }, \"Resolved cases can be generated as excel sheet and downloaded\")), /*#__PURE__*/React.createElement(CardBody, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Table, {\n    tableHeaderColor: \"primary\",\n    tableHead: [\"Case Reported On\", \"Store Location\", \"Category\", \"Description\", \"Staff Name\", \"Comments\"],\n    tableData: temp[0].map(function (temp) {\n      return [temp.dateTime, temp.storeName, temp.problem.category, temp.description, temp.staffName, temp.comments];\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 11\n    }\n  }))))), /*#__PURE__*/React.createElement(GridContainer, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 125,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(GridItem, {\n    xs: 12,\n    sm: 12,\n    md: 12,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 126,\n      columnNumber: 7\n    }\n  })));\n}","map":{"version":3,"sources":["D:/material-dashboard-react-master/src/views/Analytics/Analytics.js"],"names":["React","GridItem","GridContainer","CustomInput","Button","Card","CardHeader","CardAvatar","CardBody","CardFooter","Container","List","Fragment","axios","Table","ReactPaginate","resolvedCases","temp","getResolvedCases","get","then","response","push","data","Object","values","console","log","array","error","Analytics","map","dateTime","storeName","problem","category","description","staffName","comments"],"mappings":"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","sourcesContent":["import React from \"react\";\n// core components\nimport GridItem from \"components/Grid/GridItem.js\";\nimport GridContainer from \"components/Grid/GridContainer.js\";\nimport CustomInput from \"components/CustomInput/CustomInput.js\";\nimport Button from \"components/CustomButtons/Button.js\";\nimport Card from \"components/Card/Card.js\";\nimport CardHeader from \"components/Card/CardHeader.js\";\nimport CardAvatar from \"components/Card/CardAvatar.js\";\nimport CardBody from \"components/Card/CardBody.js\";\nimport CardFooter from \"components/Card/CardFooter.js\";\nimport { Container, List } from \"semantic-ui-react\";\nimport {Fragment} from 'react';\nimport axios from 'axios';\nimport Table from \"components/Table/Table.js\";\nimport ReactPaginate from 'react-paginate';\n\n\n// const newCases = [];\n// const array = [];\n\n// const download = function (data) {\n//   const blob = new Blob([data], { type: 'text/csv' });\n//   const url = window.URL.createObjectURL(blob);\n//   const a = document.createElement('a');\n//   a.setAttribute('hidden', '');\n//   a.setAttribute('href', url);\n//   a.setAttribute('download', 'download.csv');\n//   document.body.appendChild(a);\n//   a.click();\n//   document.body.removeChild(a);\n// };\n\n\n// function generateResolvedCases() {\n//   axios\n//     .get(\"http://localhost:8080/api/v1/fault?status=Resolved\")\n//     .then((response) => {\n//       newCases.push(response.data)\n//       array.push(Object.values(newCases[0]))\n//       console.log(array);\n\n//       const data = array[0].map(row => ({\n//         ReportedOn: row.dateTime,\n//         StoreName: row.storeName,\n//         Category: row.problem.category,\n//         Description: row.description,\n//         StaffName: row.staffName,\n//         Comments: row.comments\n//       }));\n//       console.log('sadas');\n//       //console.log(data);\n\n//       const csvRows = [];\n\n//       //get the headers\n//       const headers = Object.keys(data[0]);\n\n//       csvRows.push(headers.join(','));\n\n//       //loop over rows\n//       for (const row of data) {\n//         const values = headers.map(header => {\n\n//           return row[header];\n//         });\n//         csvRows.push(values.join(','));\n//       }\n//       //form escaped comma seperated values\n//       const newdata = csvRows.map(e => e).join('\\n');\n//       console.log(newdata);\n//       download(newdata);\n//     })\n    \n// }\n\nconst resolvedCases = [];\nconst temp =[];\nfunction getResolvedCases(){\n  axios\n  .get(\"http://localhost:8080/api/v1/fault?status=Resolved\")\n  .then((response) => {\n    try{\n    resolvedCases.push(response.data)\n    temp.push(Object.values(resolvedCases[0]))\n    console.log(array[0]);\n    }\n    catch(error){\n      console.log(error);\n    }\n})\n}\ngetResolvedCases();\n\n\n\n\n\nexport default function Analytics() {\n  return (\n    <div>\n    <GridContainer>\n    <GridItem xs={12} sm={12} md={12}>\n      <Card>\n        <CardHeader color=\"primary\">\n          <h4>Resolved Cases</h4>\n          <p>\n            Resolved cases can be generated as excel sheet and downloaded\n          </p>\n        </CardHeader>\n        <CardBody>\n          <Table\n            tableHeaderColor=\"primary\"\n            tableHead={[\"Case Reported On\", \"Store Location\", \"Category\", \"Description\", \"Staff Name\", \"Comments\"]}\n            tableData={\n              temp[0].map((temp) => {\n                return [temp.dateTime,temp.storeName,temp.problem.category,temp.description,temp.staffName,temp.comments]\n            })\n            }\n          />\n        </CardBody>\n      </Card>\n    </GridItem>\n  </GridContainer>\n    <GridContainer>\n      <GridItem xs={12} sm={12} md={12}>\n      {/* <Button onClick={() => generateResolvedCases()} fullWidth color=\"info\">Generate Excel Sheet</Button> */}\n      </GridItem>\n    </GridContainer>\n    </div>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}